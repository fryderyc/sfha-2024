# -*- coding: utf-8 -*-
"""cryptography

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19xIdGrHeJkQ2esAH3r4c5FZiWNT0wmV8
"""

!pip install pycryptodome
from Crypto.Util.Padding import pad
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Signature import PKCS1_PSS
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES

class Cryptohelper:

  def __init__(self):
    pass
    def __save_file(self, contents, file_name):
      pass
    def __read_file(self, file_name):
      pass
    def __generate_random(self):
      pass
    def generate_keys(self):
      pass
    def _sha256(self, input):
      sha256 = SHA256.new(input.encode('utf-8')).hexdigest()
      return sha256

key = RSA.generate(2048)

private_key = key.export_key()
with open ('private.pem', 'wb') as f:
    f.write(private_key)

public_key = key.publickey().export_key()
with open ('public.pem', 'wb') as f:
    f.write(public_key)

with open("crypto.txt", "rb") as file:
  file_content = file.read()

print(file_content)

aes_key = get_random_bytes(16)
cipher_helper = AES.new(aes_key, AES.MODE_CBC)
encrypted_file_content = cipher_helper.encrypt(pad(file_content, 16))
print(encrypted_file_content)

rsa_cipher_helper =PKCS1_OAEP.new(RSA.import_key(public_key))
encrypted_aes_key = rsa_cipher_helper.encrypt(aes_key)
print(encrypted_aes_key)

key_generator = RSA.generate(2048)
private_key =key_generator.export_key()
public_key = key_generator.publickey().export_key()
print(private_key)
print(public_key)

def sign_message(self, textmessage, private_key):
    return signature.sign(self.__sha256(textmessage))
def sign_message(self, textmessage, private_key):
   private_key = RSA.import_key(self.__readfile(private_key_path))
   signature_generator = PKCS1_PSS.new(private_key)
   return signature_generator.sign(self.hash256(textmessage))
def verify(self, signed_signature, textmessage, public_key_path):
  public_key = RSA.import_key(self.__readfile(public_key_path))
  signature_verifier = PKCS1_PSS.new(public_key)
  return signature_verifier.verify(self._sha256(textmessage), signed_signature)

textmessage = "message pour les donn√©es"
signed_signature = Cryptohelper().sign_message(textmessage, "private.PEM")
print (signed_signature)

if CryptoHelper().verify(signed_signature, textmessage, "public.PEM"):
  print ("verification successful")
else:
  print ("verification unsuccessful")

"""from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
from Crypto.Cipher import PKCS1_OAEP

with open("crypto.txt","rb") as  file:

    file_content = file.read()

print(file_content)


 # AES_key = "0123456789012345".encode()
aes_key = get_random_bytes(16)
cipher_helper = AES.new(key, AES.MODE_CBC)
encrypted_file_content = cipher_helper.encrypt(pad(file_content, 16))
print(encrypted_file_content)

rsa_cipher_helper = PKCS1_OAEP.new(RSA.import_key(public_key ))
encrypted_aes_key = rsa_cipher_helper.encrypt(aes_key)
print(encrypted_aes_key)
"""

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
from Crypto.Cipher import PKCS1_OAEP
with open("test.txt","rb") as  file:

    file_content = file.read()

print(file_content)


 # AES_key = "0123456789012345".encode()
aes_key = get_random_bytes(16)
cipher_helper = AES.new(aes_key, AES.MODE_CBC)
encrypted_file_content = cipher_helper.encrypt(pad(file_content, 16))
print(encrypted_file_content)

rsa_cipher_helper = PKCS1_OAEP.new(RSA.import_key(public_key ))
encrypted_aes_key = rsa_cipher_helper.encrypt(aes_key)
print(encrypted_aes_key)